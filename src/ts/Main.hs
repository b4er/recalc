{-# LANGUAGE TemplateHaskell #-}
{-# OPTIONS_GHC -fno-warn-orphans #-}

module Main where

import Data.Aeson.TypeScript.TH

-- import Language.Haskell.TH
import Network.URI

import Recalc.Server
import Recalc.Server.Protocol
import Recalc.Server.TypeScript

instance TypeScript URI where
  getTypeScriptType _ = "string"

-- extract all ''CallParam names and @deriveTypeScript@ on it
$(foldMap (deriveTypeScript aesonOptions) [''OpenParams, ''CloseParams])
-- $(reify ''SheetsProtocol >>= \case
--   TyConI (DataD _ _ _ _ [RecC _ tys] _)
--     | let names = [name | (_,_,AppT _ (AppT (AppT (AppT (ConT _) _) (ConT name)) _ )) <- tys]
--     , not (null names)
--     -> foldMap (deriveTypeScript aesonOptions) names
--   _ -> error "invalid Protocol type?")

main :: IO ()
main = do
  putStrLn "/** this file is auto-generated by tensor-infer/src-ts/Main.hs */\n"
  putStrLn . formatTSDeclarations $ typeScriptInterface @SpreadsheetProtocol
